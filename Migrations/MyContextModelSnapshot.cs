// <auto-generated />
using System;
using APIBookMyShowD.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIBookMyShowD.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("APIBookMyShowD.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MovieId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("MultiplexId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("MovieId");

                    b.HasIndex("MultiplexId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.City", b =>
                {
                    b.Property<string>("CityId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.Movie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Movies");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MultiplexID")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MovieId");

                    b.HasIndex("MultiplexID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.Multiplex", b =>
                {
                    b.Property<string>("MultiplexId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MultiplexName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("int");

                    b.HasKey("MultiplexId");

                    b.HasIndex("CityId");

                    b.ToTable("Multiplexes");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Role");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.Wallet", b =>
                {
                    b.Property<string>("walletId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("balance")
                        .HasColumnType("float");

                    b.HasKey("walletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.Booking", b =>
                {
                    b.HasOne("APIBookMyShowD.Entities.Movie", "Movies")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIBookMyShowD.Entities.Multiplex", "Multiplex")
                        .WithMany()
                        .HasForeignKey("MultiplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIBookMyShowD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Multiplex");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.Movie", b =>
                {
                    b.HasOne("APIBookMyShowD.Entities.Multiplex", "Multiplex")
                        .WithMany()
                        .HasForeignKey("MultiplexID");

                    b.Navigation("Multiplex");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.Multiplex", b =>
                {
                    b.HasOne("APIBookMyShowD.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("APIBookMyShowD.Entities.User", b =>
                {
                    b.HasOne("APIBookMyShowD.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
